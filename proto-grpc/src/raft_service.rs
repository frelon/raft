// This file is generated by rust-protobuf 2.18.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `raft-service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_2;

#[derive(PartialEq,Clone,Default)]
pub struct RequestVoteMsg {
    // message fields
    pub term: u32,
    pub candidate_id: u32,
    pub last_log_index: u32,
    pub last_log_term: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestVoteMsg {
    fn default() -> &'a RequestVoteMsg {
        <RequestVoteMsg as ::protobuf::Message>::default_instance()
    }
}

impl RequestVoteMsg {
    pub fn new() -> RequestVoteMsg {
        ::std::default::Default::default()
    }

    // uint32 term = 1;


    pub fn get_term(&self) -> u32 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u32) {
        self.term = v;
    }

    // uint32 candidate_id = 2;


    pub fn get_candidate_id(&self) -> u32 {
        self.candidate_id
    }
    pub fn clear_candidate_id(&mut self) {
        self.candidate_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_candidate_id(&mut self, v: u32) {
        self.candidate_id = v;
    }

    // uint32 last_log_index = 3;


    pub fn get_last_log_index(&self) -> u32 {
        self.last_log_index
    }
    pub fn clear_last_log_index(&mut self) {
        self.last_log_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_log_index(&mut self, v: u32) {
        self.last_log_index = v;
    }

    // uint32 last_log_term = 4;


    pub fn get_last_log_term(&self) -> u32 {
        self.last_log_term
    }
    pub fn clear_last_log_term(&mut self) {
        self.last_log_term = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_log_term(&mut self, v: u32) {
        self.last_log_term = v;
    }
}

impl ::protobuf::Message for RequestVoteMsg {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.term = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.candidate_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.last_log_index = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.last_log_term = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.candidate_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.candidate_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_log_index != 0 {
            my_size += ::protobuf::rt::value_size(3, self.last_log_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_log_term != 0 {
            my_size += ::protobuf::rt::value_size(4, self.last_log_term, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint32(1, self.term)?;
        }
        if self.candidate_id != 0 {
            os.write_uint32(2, self.candidate_id)?;
        }
        if self.last_log_index != 0 {
            os.write_uint32(3, self.last_log_index)?;
        }
        if self.last_log_term != 0 {
            os.write_uint32(4, self.last_log_term)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestVoteMsg {
        RequestVoteMsg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "term",
                |m: &RequestVoteMsg| { &m.term },
                |m: &mut RequestVoteMsg| { &mut m.term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "candidate_id",
                |m: &RequestVoteMsg| { &m.candidate_id },
                |m: &mut RequestVoteMsg| { &mut m.candidate_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "last_log_index",
                |m: &RequestVoteMsg| { &m.last_log_index },
                |m: &mut RequestVoteMsg| { &mut m.last_log_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "last_log_term",
                |m: &RequestVoteMsg| { &m.last_log_term },
                |m: &mut RequestVoteMsg| { &mut m.last_log_term },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestVoteMsg>(
                "RequestVoteMsg",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestVoteMsg {
        static instance: ::protobuf::rt::LazyV2<RequestVoteMsg> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestVoteMsg::new)
    }
}

impl ::protobuf::Clear for RequestVoteMsg {
    fn clear(&mut self) {
        self.term = 0;
        self.candidate_id = 0;
        self.last_log_index = 0;
        self.last_log_term = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestVoteMsg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestVoteMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestVoteResponse {
    // message fields
    pub term: u32,
    pub vote_granted: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestVoteResponse {
    fn default() -> &'a RequestVoteResponse {
        <RequestVoteResponse as ::protobuf::Message>::default_instance()
    }
}

impl RequestVoteResponse {
    pub fn new() -> RequestVoteResponse {
        ::std::default::Default::default()
    }

    // uint32 term = 1;


    pub fn get_term(&self) -> u32 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u32) {
        self.term = v;
    }

    // bool vote_granted = 2;


    pub fn get_vote_granted(&self) -> bool {
        self.vote_granted
    }
    pub fn clear_vote_granted(&mut self) {
        self.vote_granted = false;
    }

    // Param is passed by value, moved
    pub fn set_vote_granted(&mut self, v: bool) {
        self.vote_granted = v;
    }
}

impl ::protobuf::Message for RequestVoteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.term = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.vote_granted = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.vote_granted != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint32(1, self.term)?;
        }
        if self.vote_granted != false {
            os.write_bool(2, self.vote_granted)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestVoteResponse {
        RequestVoteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "term",
                |m: &RequestVoteResponse| { &m.term },
                |m: &mut RequestVoteResponse| { &mut m.term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "vote_granted",
                |m: &RequestVoteResponse| { &m.vote_granted },
                |m: &mut RequestVoteResponse| { &mut m.vote_granted },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestVoteResponse>(
                "RequestVoteResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestVoteResponse {
        static instance: ::protobuf::rt::LazyV2<RequestVoteResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestVoteResponse::new)
    }
}

impl ::protobuf::Clear for RequestVoteResponse {
    fn clear(&mut self) {
        self.term = 0;
        self.vote_granted = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestVoteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestVoteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AppendEntriesMsg {
    // message fields
    pub term: u32,
    pub leader_id: u32,
    pub prev_log_index: u32,
    pub prev_log_term: u32,
    pub entries: ::std::vec::Vec<u8>,
    pub leader_commit: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AppendEntriesMsg {
    fn default() -> &'a AppendEntriesMsg {
        <AppendEntriesMsg as ::protobuf::Message>::default_instance()
    }
}

impl AppendEntriesMsg {
    pub fn new() -> AppendEntriesMsg {
        ::std::default::Default::default()
    }

    // uint32 term = 1;


    pub fn get_term(&self) -> u32 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u32) {
        self.term = v;
    }

    // uint32 leader_id = 2;


    pub fn get_leader_id(&self) -> u32 {
        self.leader_id
    }
    pub fn clear_leader_id(&mut self) {
        self.leader_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_leader_id(&mut self, v: u32) {
        self.leader_id = v;
    }

    // uint32 prev_log_index = 3;


    pub fn get_prev_log_index(&self) -> u32 {
        self.prev_log_index
    }
    pub fn clear_prev_log_index(&mut self) {
        self.prev_log_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_prev_log_index(&mut self, v: u32) {
        self.prev_log_index = v;
    }

    // uint32 prev_log_term = 4;


    pub fn get_prev_log_term(&self) -> u32 {
        self.prev_log_term
    }
    pub fn clear_prev_log_term(&mut self) {
        self.prev_log_term = 0;
    }

    // Param is passed by value, moved
    pub fn set_prev_log_term(&mut self, v: u32) {
        self.prev_log_term = v;
    }

    // bytes entries = 5;


    pub fn get_entries(&self) -> &[u8] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::std::vec::Vec<u8>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entries(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.entries, ::std::vec::Vec::new())
    }

    // uint32 leader_commit = 6;


    pub fn get_leader_commit(&self) -> u32 {
        self.leader_commit
    }
    pub fn clear_leader_commit(&mut self) {
        self.leader_commit = 0;
    }

    // Param is passed by value, moved
    pub fn set_leader_commit(&mut self, v: u32) {
        self.leader_commit = v;
    }
}

impl ::protobuf::Message for AppendEntriesMsg {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.term = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.leader_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.prev_log_index = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.prev_log_term = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.entries)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.leader_commit = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.leader_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.leader_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prev_log_index != 0 {
            my_size += ::protobuf::rt::value_size(3, self.prev_log_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prev_log_term != 0 {
            my_size += ::protobuf::rt::value_size(4, self.prev_log_term, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.entries.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.entries);
        }
        if self.leader_commit != 0 {
            my_size += ::protobuf::rt::value_size(6, self.leader_commit, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint32(1, self.term)?;
        }
        if self.leader_id != 0 {
            os.write_uint32(2, self.leader_id)?;
        }
        if self.prev_log_index != 0 {
            os.write_uint32(3, self.prev_log_index)?;
        }
        if self.prev_log_term != 0 {
            os.write_uint32(4, self.prev_log_term)?;
        }
        if !self.entries.is_empty() {
            os.write_bytes(5, &self.entries)?;
        }
        if self.leader_commit != 0 {
            os.write_uint32(6, self.leader_commit)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AppendEntriesMsg {
        AppendEntriesMsg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "term",
                |m: &AppendEntriesMsg| { &m.term },
                |m: &mut AppendEntriesMsg| { &mut m.term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "leader_id",
                |m: &AppendEntriesMsg| { &m.leader_id },
                |m: &mut AppendEntriesMsg| { &mut m.leader_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "prev_log_index",
                |m: &AppendEntriesMsg| { &m.prev_log_index },
                |m: &mut AppendEntriesMsg| { &mut m.prev_log_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "prev_log_term",
                |m: &AppendEntriesMsg| { &m.prev_log_term },
                |m: &mut AppendEntriesMsg| { &mut m.prev_log_term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "entries",
                |m: &AppendEntriesMsg| { &m.entries },
                |m: &mut AppendEntriesMsg| { &mut m.entries },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "leader_commit",
                |m: &AppendEntriesMsg| { &m.leader_commit },
                |m: &mut AppendEntriesMsg| { &mut m.leader_commit },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AppendEntriesMsg>(
                "AppendEntriesMsg",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AppendEntriesMsg {
        static instance: ::protobuf::rt::LazyV2<AppendEntriesMsg> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AppendEntriesMsg::new)
    }
}

impl ::protobuf::Clear for AppendEntriesMsg {
    fn clear(&mut self) {
        self.term = 0;
        self.leader_id = 0;
        self.prev_log_index = 0;
        self.prev_log_term = 0;
        self.entries.clear();
        self.leader_commit = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AppendEntriesMsg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppendEntriesMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AppendEntriesResponse {
    // message fields
    pub term: u32,
    pub success: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AppendEntriesResponse {
    fn default() -> &'a AppendEntriesResponse {
        <AppendEntriesResponse as ::protobuf::Message>::default_instance()
    }
}

impl AppendEntriesResponse {
    pub fn new() -> AppendEntriesResponse {
        ::std::default::Default::default()
    }

    // uint32 term = 1;


    pub fn get_term(&self) -> u32 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u32) {
        self.term = v;
    }

    // bool success = 2;


    pub fn get_success(&self) -> bool {
        self.success
    }
    pub fn clear_success(&mut self) {
        self.success = false;
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = v;
    }
}

impl ::protobuf::Message for AppendEntriesResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.term = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.success != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint32(1, self.term)?;
        }
        if self.success != false {
            os.write_bool(2, self.success)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AppendEntriesResponse {
        AppendEntriesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "term",
                |m: &AppendEntriesResponse| { &m.term },
                |m: &mut AppendEntriesResponse| { &mut m.term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "success",
                |m: &AppendEntriesResponse| { &m.success },
                |m: &mut AppendEntriesResponse| { &mut m.success },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AppendEntriesResponse>(
                "AppendEntriesResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AppendEntriesResponse {
        static instance: ::protobuf::rt::LazyV2<AppendEntriesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AppendEntriesResponse::new)
    }
}

impl ::protobuf::Clear for AppendEntriesResponse {
    fn clear(&mut self) {
        self.term = 0;
        self.success = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AppendEntriesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppendEntriesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12raft-service.proto\x12\traftproto\"\x91\x01\n\x0eRequestVoteMsg\
    \x12\x12\n\x04term\x18\x01\x20\x01(\rR\x04term\x12!\n\x0ccandidate_id\
    \x18\x02\x20\x01(\rR\x0bcandidateId\x12$\n\x0elast_log_index\x18\x03\x20\
    \x01(\rR\x0clastLogIndex\x12\"\n\rlast_log_term\x18\x04\x20\x01(\rR\x0bl\
    astLogTerm\"L\n\x13RequestVoteResponse\x12\x12\n\x04term\x18\x01\x20\x01\
    (\rR\x04term\x12!\n\x0cvote_granted\x18\x02\x20\x01(\x08R\x0bvoteGranted\
    \"\xcc\x01\n\x10AppendEntriesMsg\x12\x12\n\x04term\x18\x01\x20\x01(\rR\
    \x04term\x12\x1b\n\tleader_id\x18\x02\x20\x01(\rR\x08leaderId\x12$\n\x0e\
    prev_log_index\x18\x03\x20\x01(\rR\x0cprevLogIndex\x12\"\n\rprev_log_ter\
    m\x18\x04\x20\x01(\rR\x0bprevLogTerm\x12\x18\n\x07entries\x18\x05\x20\
    \x01(\x0cR\x07entries\x12#\n\rleader_commit\x18\x06\x20\x01(\rR\x0cleade\
    rCommit\"E\n\x15AppendEntriesResponse\x12\x12\n\x04term\x18\x01\x20\x01(\
    \rR\x04term\x12\x18\n\x07success\x18\x02\x20\x01(\x08R\x07success2\xa0\
    \x01\n\x04Raft\x12H\n\x0bRequestVote\x12\x19.raftproto.RequestVoteMsg\
    \x1a\x1e.raftproto.RequestVoteResponse\x12N\n\rAppendEntries\x12\x1b.raf\
    tproto.AppendEntriesMsg\x1a\x20.raftproto.AppendEntriesResponseb\x06prot\
    o3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
